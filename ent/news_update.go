// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"intern_traning/ent/news"
	"intern_traning/ent/predicate"
	"intern_traning/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NewsUpdate is the builder for updating News entities.
type NewsUpdate struct {
	config
	hooks    []Hook
	mutation *NewsMutation
}

// Where appends a list predicates to the NewsUpdate builder.
func (nu *NewsUpdate) Where(ps ...predicate.News) *NewsUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NewsUpdate) SetUpdatedAt(t time.Time) *NewsUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableUpdatedAt(t *time.Time) *NewsUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NewsUpdate) ClearUpdatedAt() *NewsUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// SetDeletedAt sets the "deleted_at" field.
func (nu *NewsUpdate) SetDeletedAt(t time.Time) *NewsUpdate {
	nu.mutation.SetDeletedAt(t)
	return nu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableDeletedAt(t *time.Time) *NewsUpdate {
	if t != nil {
		nu.SetDeletedAt(*t)
	}
	return nu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nu *NewsUpdate) ClearDeletedAt() *NewsUpdate {
	nu.mutation.ClearDeletedAt()
	return nu
}

// SetSlug sets the "slug" field.
func (nu *NewsUpdate) SetSlug(s string) *NewsUpdate {
	nu.mutation.SetSlug(s)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NewsUpdate) SetTitle(s string) *NewsUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetStatus sets the "status" field.
func (nu *NewsUpdate) SetStatus(n news.Status) *NewsUpdate {
	nu.mutation.SetStatus(n)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableStatus(n *news.Status) *NewsUpdate {
	if n != nil {
		nu.SetStatus(*n)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NewsUpdate) SetDescription(s string) *NewsUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableDescription(s *string) *NewsUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NewsUpdate) ClearDescription() *NewsUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetContent sets the "content" field.
func (nu *NewsUpdate) SetContent(s string) *NewsUpdate {
	nu.mutation.SetContent(s)
	return nu
}

// SetAuthorID sets the "author_id" field.
func (nu *NewsUpdate) SetAuthorID(u uuid.UUID) *NewsUpdate {
	nu.mutation.SetAuthorID(u)
	return nu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableAuthorID(u *uuid.UUID) *NewsUpdate {
	if u != nil {
		nu.SetAuthorID(*u)
	}
	return nu
}

// ClearAuthorID clears the value of the "author_id" field.
func (nu *NewsUpdate) ClearAuthorID() *NewsUpdate {
	nu.mutation.ClearAuthorID()
	return nu
}

// SetAuthorEdgeID sets the "author_edge" edge to the User entity by ID.
func (nu *NewsUpdate) SetAuthorEdgeID(id uuid.UUID) *NewsUpdate {
	nu.mutation.SetAuthorEdgeID(id)
	return nu
}

// SetNillableAuthorEdgeID sets the "author_edge" edge to the User entity by ID if the given value is not nil.
func (nu *NewsUpdate) SetNillableAuthorEdgeID(id *uuid.UUID) *NewsUpdate {
	if id != nil {
		nu = nu.SetAuthorEdgeID(*id)
	}
	return nu
}

// SetAuthorEdge sets the "author_edge" edge to the User entity.
func (nu *NewsUpdate) SetAuthorEdge(u *User) *NewsUpdate {
	return nu.SetAuthorEdgeID(u.ID)
}

// Mutation returns the NewsMutation object of the builder.
func (nu *NewsUpdate) Mutation() *NewsMutation {
	return nu.mutation
}

// ClearAuthorEdge clears the "author_edge" edge to the User entity.
func (nu *NewsUpdate) ClearAuthorEdge() *NewsUpdate {
	nu.mutation.ClearAuthorEdge()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NewsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NewsUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NewsUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NewsUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NewsUpdate) check() error {
	if v, ok := nu.mutation.Slug(); ok {
		if err := news.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "News.slug": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Status(); ok {
		if err := news.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "News.status": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Description(); ok {
		if err := news.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "News.description": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Content(); ok {
		if err := news.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "News.content": %w`, err)}
		}
	}
	return nil
}

func (nu *NewsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   news.Table,
			Columns: news.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: news.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(news.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.ClearField(news.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.DeletedAt(); ok {
		_spec.SetField(news.FieldDeletedAt, field.TypeTime, value)
	}
	if nu.mutation.DeletedAtCleared() {
		_spec.ClearField(news.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.Slug(); ok {
		_spec.SetField(news.FieldSlug, field.TypeString, value)
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(news.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.SetField(news.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(news.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(news.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.Content(); ok {
		_spec.SetField(news.FieldContent, field.TypeString, value)
	}
	if nu.mutation.AuthorEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   news.AuthorEdgeTable,
			Columns: []string{news.AuthorEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AuthorEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   news.AuthorEdgeTable,
			Columns: []string{news.AuthorEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NewsUpdateOne is the builder for updating a single News entity.
type NewsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NewsUpdateOne) SetUpdatedAt(t time.Time) *NewsUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableUpdatedAt(t *time.Time) *NewsUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NewsUpdateOne) ClearUpdatedAt() *NewsUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// SetDeletedAt sets the "deleted_at" field.
func (nuo *NewsUpdateOne) SetDeletedAt(t time.Time) *NewsUpdateOne {
	nuo.mutation.SetDeletedAt(t)
	return nuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableDeletedAt(t *time.Time) *NewsUpdateOne {
	if t != nil {
		nuo.SetDeletedAt(*t)
	}
	return nuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nuo *NewsUpdateOne) ClearDeletedAt() *NewsUpdateOne {
	nuo.mutation.ClearDeletedAt()
	return nuo
}

// SetSlug sets the "slug" field.
func (nuo *NewsUpdateOne) SetSlug(s string) *NewsUpdateOne {
	nuo.mutation.SetSlug(s)
	return nuo
}

// SetTitle sets the "title" field.
func (nuo *NewsUpdateOne) SetTitle(s string) *NewsUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NewsUpdateOne) SetStatus(n news.Status) *NewsUpdateOne {
	nuo.mutation.SetStatus(n)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableStatus(n *news.Status) *NewsUpdateOne {
	if n != nil {
		nuo.SetStatus(*n)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NewsUpdateOne) SetDescription(s string) *NewsUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableDescription(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NewsUpdateOne) ClearDescription() *NewsUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetContent sets the "content" field.
func (nuo *NewsUpdateOne) SetContent(s string) *NewsUpdateOne {
	nuo.mutation.SetContent(s)
	return nuo
}

// SetAuthorID sets the "author_id" field.
func (nuo *NewsUpdateOne) SetAuthorID(u uuid.UUID) *NewsUpdateOne {
	nuo.mutation.SetAuthorID(u)
	return nuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableAuthorID(u *uuid.UUID) *NewsUpdateOne {
	if u != nil {
		nuo.SetAuthorID(*u)
	}
	return nuo
}

// ClearAuthorID clears the value of the "author_id" field.
func (nuo *NewsUpdateOne) ClearAuthorID() *NewsUpdateOne {
	nuo.mutation.ClearAuthorID()
	return nuo
}

// SetAuthorEdgeID sets the "author_edge" edge to the User entity by ID.
func (nuo *NewsUpdateOne) SetAuthorEdgeID(id uuid.UUID) *NewsUpdateOne {
	nuo.mutation.SetAuthorEdgeID(id)
	return nuo
}

// SetNillableAuthorEdgeID sets the "author_edge" edge to the User entity by ID if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableAuthorEdgeID(id *uuid.UUID) *NewsUpdateOne {
	if id != nil {
		nuo = nuo.SetAuthorEdgeID(*id)
	}
	return nuo
}

// SetAuthorEdge sets the "author_edge" edge to the User entity.
func (nuo *NewsUpdateOne) SetAuthorEdge(u *User) *NewsUpdateOne {
	return nuo.SetAuthorEdgeID(u.ID)
}

// Mutation returns the NewsMutation object of the builder.
func (nuo *NewsUpdateOne) Mutation() *NewsMutation {
	return nuo.mutation
}

// ClearAuthorEdge clears the "author_edge" edge to the User entity.
func (nuo *NewsUpdateOne) ClearAuthorEdge() *NewsUpdateOne {
	nuo.mutation.ClearAuthorEdge()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NewsUpdateOne) Select(field string, fields ...string) *NewsUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated News entity.
func (nuo *NewsUpdateOne) Save(ctx context.Context) (*News, error) {
	var (
		err  error
		node *News
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*News)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NewsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NewsUpdateOne) SaveX(ctx context.Context) *News {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NewsUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NewsUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NewsUpdateOne) check() error {
	if v, ok := nuo.mutation.Slug(); ok {
		if err := news.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "News.slug": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Status(); ok {
		if err := news.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "News.status": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Description(); ok {
		if err := news.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "News.description": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Content(); ok {
		if err := news.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "News.content": %w`, err)}
		}
	}
	return nil
}

func (nuo *NewsUpdateOne) sqlSave(ctx context.Context) (_node *News, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   news.Table,
			Columns: news.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: news.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "News.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, news.FieldID)
		for _, f := range fields {
			if !news.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != news.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(news.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(news.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.DeletedAt(); ok {
		_spec.SetField(news.FieldDeletedAt, field.TypeTime, value)
	}
	if nuo.mutation.DeletedAtCleared() {
		_spec.ClearField(news.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.Slug(); ok {
		_spec.SetField(news.FieldSlug, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(news.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.SetField(news.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(news.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(news.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.Content(); ok {
		_spec.SetField(news.FieldContent, field.TypeString, value)
	}
	if nuo.mutation.AuthorEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   news.AuthorEdgeTable,
			Columns: []string{news.AuthorEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AuthorEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   news.AuthorEdgeTable,
			Columns: []string{news.AuthorEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &News{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
