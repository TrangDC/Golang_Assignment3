// Code generated by ent, DO NOT EDIT.

package ent

import (
	"intern_traning/ent/news"
	"intern_traning/ent/schema"
	"intern_traning/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	newsMixin := schema.News{}.Mixin()
	newsMixinFields0 := newsMixin[0].Fields()
	_ = newsMixinFields0
	newsMixinFields1 := newsMixin[1].Fields()
	_ = newsMixinFields1
	newsFields := schema.News{}.Fields()
	_ = newsFields
	// newsDescCreatedAt is the schema descriptor for created_at field.
	newsDescCreatedAt := newsMixinFields0[1].Descriptor()
	// news.DefaultCreatedAt holds the default value on creation for the created_at field.
	news.DefaultCreatedAt = newsDescCreatedAt.Default.(func() time.Time)
	// newsDescSlug is the schema descriptor for slug field.
	newsDescSlug := newsMixinFields1[0].Descriptor()
	// news.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	news.SlugValidator = newsDescSlug.Validators[0].(func(string) error)
	// newsDescTitle is the schema descriptor for title field.
	newsDescTitle := newsFields[0].Descriptor()
	// news.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	news.TitleValidator = func() func(string) error {
		validators := newsDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// newsDescDescription is the schema descriptor for description field.
	newsDescDescription := newsFields[2].Descriptor()
	// news.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	news.DescriptionValidator = newsDescDescription.Validators[0].(func(string) error)
	// newsDescContent is the schema descriptor for content field.
	newsDescContent := newsFields[3].Descriptor()
	// news.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	news.ContentValidator = newsDescContent.Validators[0].(func(string) error)
	// newsDescID is the schema descriptor for id field.
	newsDescID := newsMixinFields0[0].Descriptor()
	// news.DefaultID holds the default value on creation for the id field.
	news.DefaultID = newsDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescWorkEmail is the schema descriptor for work_email field.
	userDescWorkEmail := userFields[2].Descriptor()
	// user.WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	user.WorkEmailValidator = userDescWorkEmail.Validators[0].(func(string) error)
	// userDescOid is the schema descriptor for oid field.
	userDescOid := userFields[3].Descriptor()
	// user.OidValidator is a validator for the "oid" field. It is called by the builders before save.
	user.OidValidator = userDescOid.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
