package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/techvifyharrydo/Room-Reservation/ent"
	graphql1 "github.com/techvifyharrydo/Room-Reservation/graphql"
)

// ID is the resolver for the id field.
func (r *bookingResolver) ID(ctx context.Context, obj *ent.Booking) (string, error) {
	return obj.ID.String(), nil
}

// StartDate is the resolver for the start_date field.
func (r *bookingResolver) StartDate(ctx context.Context, obj *ent.Booking) (string, error) {
	panic(fmt.Errorf("not implemented: StartDate - start_date"))
}

// StartTime is the resolver for the start_time field.
func (r *bookingResolver) StartTime(ctx context.Context, obj *ent.Booking) (string, error) {
	panic(fmt.Errorf("not implemented: StartTime - start_time"))
}

// EndTime is the resolver for the end_time field.
func (r *bookingResolver) EndTime(ctx context.Context, obj *ent.Booking) (string, error) {
	panic(fmt.Errorf("not implemented: EndTime - end_time"))
}

// EndDate is the resolver for the end_date field.
func (r *bookingResolver) EndDate(ctx context.Context, obj *ent.Booking) (*string, error) {
	panic(fmt.Errorf("not implemented: EndDate - end_date"))
}

// RoomID is the resolver for the roomID field.
func (r *bookingResolver) RoomID(ctx context.Context, obj *ent.Booking) (string, error) {
	return obj.RoomID.String(), nil
}

// UserID is the resolver for the userID field.
func (r *bookingResolver) UserID(ctx context.Context, obj *ent.Booking) (string, error) {
	return obj.UserID.String(), nil
}

// Booking returns graphql1.BookingResolver implementation.
func (r *Resolver) Booking() graphql1.BookingResolver { return &bookingResolver{r} }

type bookingResolver struct{ *Resolver }
